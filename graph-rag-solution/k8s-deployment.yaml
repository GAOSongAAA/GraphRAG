apiVersion: v1
kind: Namespace
metadata:
  name: graph-rag
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: graph-rag-config
  namespace: graph-rag
data:
  application.yml: |
    server:
      port: 8080
    spring:
      profiles:
        active: prod
      neo4j:
        uri: bolt://neo4j-service:7687
        authentication:
          username: neo4j
          password: password123
      redis:
        host: redis-service
        port: 6379
        password: redis123
    langchain4j:
      openai:
        api-key: ${OPENAI_API_KEY}
        base-url: ${OPENAI_BASE_URL:https://api.openai.com/v1}
---
apiVersion: v1
kind: Secret
metadata:
  name: graph-rag-secrets
  namespace: graph-rag
type: Opaque
data:
  openai-api-key: # Base64 encoded OpenAI API key
  neo4j-password: cGFzc3dvcmQxMjM=  # password123
  redis-password: cmVkaXMxMjM=      # redis123
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: neo4j
  namespace: graph-rag
spec:
  replicas: 1
  selector:
    matchLabels:
      app: neo4j
  template:
    metadata:
      labels:
        app: neo4j
    spec:
      containers:
      - name: neo4j
        image: neo4j:5.15.0
        ports:
        - containerPort: 7474
        - containerPort: 7687
        env:
        - name: NEO4J_AUTH
          value: "neo4j/password123"
        - name: NEO4J_PLUGINS
          value: '["apoc", "graph-data-science"]'
        - name: NEO4J_dbms_security_procedures_unrestricted
          value: "apoc.*,gds.*"
        - name: NEO4J_dbms_memory_heap_initial__size
          value: "1G"
        - name: NEO4J_dbms_memory_heap_max__size
          value: "2G"
        volumeMounts:
        - name: neo4j-data
          mountPath: /data
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2"
      volumes:
      - name: neo4j-data
        persistentVolumeClaim:
          claimName: neo4j-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: neo4j-service
  namespace: graph-rag
spec:
  selector:
    app: neo4j
  ports:
  - name: http
    port: 7474
    targetPort: 7474
  - name: bolt
    port: 7687
    targetPort: 7687
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: graph-rag
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7.2-alpine
        command: ["redis-server", "--appendonly", "yes", "--requirepass", "redis123"]
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: graph-rag
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: graph-rag-app
  namespace: graph-rag
spec:
  replicas: 3
  selector:
    matchLabels:
      app: graph-rag-app
  template:
    metadata:
      labels:
        app: graph-rag-app
    spec:
      containers:
      - name: graph-rag-app
        image: graph-rag:latest
        ports:
        - containerPort: 8080
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "prod"
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: graph-rag-secrets
              key: openai-api-key
        - name: NEO4J_URI
          value: "bolt://neo4j-service:7687"
        - name: NEO4J_USERNAME
          value: "neo4j"
        - name: NEO4J_PASSWORD
          valueFrom:
            secretKeyRef:
              name: graph-rag-secrets
              key: neo4j-password
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: graph-rag-secrets
              key: redis-password
        livenessProbe:
          httpGet:
            path: /api/v1/graph-rag/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/v1/graph-rag/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: graph-rag-service
  namespace: graph-rag
spec:
  selector:
    app: graph-rag-app
  ports:
  - port: 80
    targetPort: 8080
  type: LoadBalancer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: neo4j-pvc
  namespace: graph-rag
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: graph-rag
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: graph-rag-ingress
  namespace: graph-rag
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - graph-rag.example.com
    secretName: graph-rag-tls
  rules:
  - host: graph-rag.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: graph-rag-service
            port:
              number: 80

