version: '3.8'

services:
  # Neo4j 数据库
  neo4j:
    image: neo4j:5.15.0
    container_name: graph-rag-neo4j
    environment:
      - NEO4J_AUTH=${NEO4J_USERNAME:-neo4j}/${NEO4J_PASSWORD:-password123}
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_memory_heap_initial__size=${NEO4J_HEAP_INITIAL_SIZE:-1G}
      - NEO4J_dbms_memory_heap_max__size=${NEO4J_HEAP_MAX_SIZE:-2G}
      - NEO4J_dbms_memory_pagecache_size=${NEO4J_PAGECACHE_SIZE:-1G}
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - graph-rag-network
    restart: unless-stopped

  # Redis 缓存
  redis:
    image: redis:7.2-alpine
    container_name: graph-rag-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - graph-rag-network
    restart: unless-stopped

  # Graph RAG 应用
  graph-rag-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: graph-rag-app
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=${NEO4J_USERNAME:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis123}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL:-https://api.openai.com/v1}
    ports:
      - "8080:8080"
    volumes:
      - .:/app
      - app_logs:/app/logs
    networks:
      - graph-rag-network
    depends_on:
      - neo4j
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/graph-rag/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx 反向代理
  nginx:
    image: nginx:1.25-alpine
    container_name: graph-rag-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx:/etc/nginx:ro
    networks:
      - graph-rag-network
    depends_on:
      - graph-rag-app
    restart: unless-stopped

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: graph-rag-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_TIME:-15d}'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    networks:
      - graph-rag-network
    restart: unless-stopped

  # Grafana 可视化
  grafana:
    image: grafana/grafana:10.1.0
    container_name: graph-rag-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-http://localhost:3000}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - graph-rag-network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  redis_data:
  app_logs:
  prometheus_data:
  grafana_data:

networks:
  graph-rag-network:
    driver: bridge
